*unfurl.txt*	For Neovim 0.9+ with Denops	Last change: {date}

==============================================================================
CONTENTS						*unfurl-contents*

1. Introduction				|unfurl-introduction|
2. Requirements				|unfurl-requirements|
3. Installation				|unfurl-installation|
4. Usage					|unfurl-usage|
5. Commands				|unfurl-commands|
6. Configuration				|unfurl-configuration|
7. License					|unfurl-license|

==============================================================================
INTRODUCTION					*unfurl-introduction*

unfurl.nvim is a Neovim plugin that fetches the title and meta information (like image, type) from a given URL and inserts it into the current buffer in Markdown format. It's useful for quickly recording information about web pages when taking notes.

==============================================================================
REQUIREMENTS					*unfurl-requirements*

- [Neovim](https://neovim.io/) 0.9+
- [denops.vim](https://github.com/vim-denops/denops.vim)
- [img-clip.nvim](https://github.com/HakonHarnes/img-clip.nvim)

==============================================================================
INSTALLATION					*unfurl-installation*

Install using [lazy.nvim](https://github.com/folke/lazy.nvim). Ensure `denops.vim` is also installed.
See the README.md for the installation snippet.

==============================================================================
USAGE						*unfurl-usage*

This plugin provides commands for basic interaction. See |unfurl-commands|.
Configuration options are available to customize behavior. See |unfurl-configuration|.

==============================================================================
COMMANDS					*unfurl-commands*

*:Unfurl* {url}
	Fetches the HTML title, meta image, and meta type (if available) from the
	specified {url}. Inserts the meta type as `(Type: type)`, the title as a
	Markdown link (`[title](url)`), and the meta image URL (or local path if
	downloaded) directly after the current cursor line.
	Whether the image is downloaded depends on the |g:unfurl_option| setting,
	specifically the `download_images` option within the `img-clip` dictionary.
	See |unfurl-configuration|.
	Example:
>
	:Unfurl https://github.com
<
	(Output depends on the URL's metadata and your configuration)

*:Unfurld* {url}					*:Unfurld*
	Similar to |:Unfurl|, but **always downloads** the meta image to your local
	machine, regardless of the `download_images` setting in |g:unfurl_option|.
	This uses the options configured in |g:unfurl_option| for `img-clip` (like
	`template` and `use_absolute_path`), but overrides the download behavior.
	Example:
>
	:Unfurld https://example.com/article-with-image
<
	(Will attempt to download the image associated with the URL)

==============================================================================
CONFIGURATION					*unfurl-configuration*

You can configure the plugin's behavior by setting the global variable
|g:unfurl_option|. This variable should be a dictionary.

Currently, the main configuration involves options passed to `img-clip.nvim`,
which are nested under the `img-clip` key.

*g:unfurl_option*				*g:unfurl_option*
	Type: |Dictionary|
	Default: `{}` (effectively uses default values for sub-options)

	Example configuration in Vimscript: >
	let g:unfurl_option = {
	\   'img-clip': {
	\     'use_absolute_path': v:false,
	\     'download_images': v:false,  " Default for :Unfurl
	\     'template': '![]($FILE_PATH)',
	\   },
	\ }
<
	Example configuration in Lua: >
	vim.g.unfurl_option = {
	  ["img-clip"] = {
	    use_absolute_path = false,
	    download_images = false, -- Default for :Unfurl
	    template = "![]($FILE_PATH)",
	    -- Add other img-clip options here as needed
	  },
	  -- Add other plugin-specific options here in the future
	}
<
	Options under `g:unfurl_option['img-clip']`:
	- `use_absolute_path`: (Boolean, default: `v:false`) Passed to `img-clip`.
	- `download_images`: (Boolean, default: `v:false`) If `v:true`, |:Unfurl|
	  will attempt to download the image using `img-clip`. |:Unfurld| always
	  attempts to download the image, regardless of this setting.
	- `template`: (String, default: `"![]($FILE_PATH)"`) Passed to `img-clip`.

	Refer to the `img-clip.nvim` documentation for details on its options. If
	|g:unfurl_option| or `g:unfurl_option['img-clip']` is not set, default
	values are used.

==============================================================================
LICENSE						*unfurl-license*

This plugin is distributed under the MIT License.
See the LICENSE file for details.

==============================================================================
 vim:tw=78:ts=8:ft=help:norl: